---
- name: Run the installer with command line options
  block:
    - name: create command line options when not using the inventory.
      set_fact:
        installer_args: |
            {% for k,v in awx_inventory.iteritems() -%}
            -e {{ k }}={{ v }}{{ '' if loop.last else ' ' }}
            {%- endfor -%}

    - name: Run the AWX installation playbook with command line args.
      command: "ansible-playbook -i inventory install.yml {{ installer_args }}"
      args:
        chdir: "{{ awx_repo_dir }}/installer"
        creates: /etc/awx_playbook_complete
  when: not awx_modify_inventory

- name: Run the installer with the inventory file
  block:
    - name: Enable/Change settings in the awx inventory file from upstream
      lineinfile:
        destfile: "{{ awx_repo_dir }}/installer/inventory"
        regexp: '^\s*{{ item.key }}=.*$'
        line: "{{ item.key }}={{ item.value['value'] }}"
        state: present
      with_dict: "{{ awx_inventory }}"
      when: item.value.disabled is defined and not item.value.disabled

    - name: Remove disabled settings in the awx inventory file from upstream
      lineinfile:
        destfile: "{{ awx_repo_dir }}/installer/inventory"
        regexp: '^\s*{{ item.key }}=.*$'
        state: absent
        backup: true
      with_dict: "{{ awx_inventory }}"
      when: item.value.disabled is defined and item.value.disabled

    - name: Run the AWX installation playbook without command line args.
      command: "ansible-playbook -i inventory install.yml"
      args:
        chdir: "{{ awx_repo_dir }}/installer"
        creates: /etc/awx_playbook_complete
  when: awx_modify_inventory

- name: Create a file to mark whether this playbook has completed.
  file:
    path: /etc/awx_playbook_complete
    state: touch
  changed_when: false
